// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole
  countyId  String?
  county    County?  @relation(fields: [countyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  players   Player[]
  officials Official[]
  matchAssignments MatchOfficial[]
  submittedReports MatchReport[]
  playerInspections PlayerInspection[]
  matchInspections MatchInspection[]
  blogPosts BlogPost[]
  observations FederationObservation[]

  @@map("users")
}

model County {
  id        String   @id @default(cuid())
  name      String   @unique
  group     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users     User[]
  players   Player[]
  homeMatches Match[] @relation("HomeTeam")
  awayMatches Match[] @relation("AwayTeam")

  @@map("counties")
}

model Player {
  id           String        @id @default(cuid())
  photo        String?
  lastName     String
  firstName    String
  middleName   String?
  dateOfBirth  DateTime
  nationality  String
  pastClub     String?
  currentClub  String?
  level        String
  discipline   Discipline
  year         Int
  group        String
  status       ApprovalStatus @default(PENDING)
  countyId     String
  county       County         @relation(fields: [countyId], references: [id])
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  birthCertificate String?
  medicalCertificate String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  scorers      MatchScorer[]
  documentApprovals DocumentApproval[]
  yellowCards  YellowCard[]
  redCards     RedCard[]
  substitutionsOut Substitution[] @relation("PlayerOut")
  substitutionsIn  Substitution[] @relation("PlayerIn")
  inspections  PlayerInspection[]

  @@map("players")
}

model Official {
  id           String        @id @default(cuid())
  photo        String?
  lastName     String
  firstName    String
  middleName   String?
  dateOfBirth  DateTime
  nationality  String
  currentCounty String
  discipline   Discipline
  year         Int
  group        String
  position     String
  status       ApprovalStatus @default(PENDING)
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("officials")
}

model Match {
  id          String   @id @default(cuid())
  homeTeamId  String
  awayTeamId  String
  homeTeam    County   @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam    County   @relation("AwayTeam", fields: [awayTeamId], references: [id])
  date        DateTime
  kickoffTime DateTime
  venue       String
  discipline  Discipline
  group       String
  homeScore   Int?
  awayScore   Int?
  status      MatchStatus @default(SCHEDULED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  reports     MatchReport[]
  scorers     MatchScorer[]
  officials   MatchOfficial[]
  inspections PlayerInspection[]
  matchInspection MatchInspection?

  @@map("matches")
}

model MatchReport {
  id          String   @id @default(cuid())
  matchId     String
  match       Match    @relation(fields: [matchId], references: [id])
  submittedById String
  submittedBy  User     @relation(fields: [submittedById], references: [id])
  homeTeamScore Int
  awayTeamScore Int
  yellowCards   YellowCard[]
  redCards      RedCard[]
  substitutions Substitution[]
  notes         String?
  status        ReportStatus @default(SUBMITTED)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("match_reports")
}

model YellowCard {
  id            String   @id @default(cuid())
  matchReportId String
  matchReport   MatchReport @relation(fields: [matchReportId], references: [id])
  playerId      String
  player        Player   @relation(fields: [playerId], references: [id])
  minute        Int
  reason        String?
  createdAt     DateTime @default(now())

  @@map("yellow_cards")
}

model RedCard {
  id            String   @id @default(cuid())
  matchReportId String
  matchReport   MatchReport @relation(fields: [matchReportId], references: [id])
  playerId      String
  player        Player   @relation(fields: [playerId], references: [id])
  minute        Int
  reason        String
  createdAt     DateTime @default(now())

  @@map("red_cards")
}

model Substitution {
  id            String   @id @default(cuid())
  matchReportId String
  matchReport   MatchReport @relation(fields: [matchReportId], references: [id])
  playerOutId   String
  playerOut     Player   @relation("PlayerOut", fields: [playerOutId], references: [id])
  playerInId    String
  playerIn      Player   @relation("PlayerIn", fields: [playerInId], references: [id])
  minute        Int
  createdAt     DateTime @default(now())

  @@map("substitutions")
}

model MatchOfficial {
  id          String   @id @default(cuid())
  matchId     String
  match       Match    @relation(fields: [matchId], references: [id])
  officialId  String
  official    User     @relation(fields: [officialId], references: [id])
  role        OfficialRole
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("match_officials")
}

model PlayerInspection {
  id          String   @id @default(cuid())
  matchId     String
  match       Match    @relation(fields: [matchId], references: [id])
  playerId    String
  player      Player   @relation(fields: [playerId], references: [id])
  status      InspectionStatus @default(PENDING)
  inspectedById String
  inspectedBy  User    @relation(fields: [inspectedById], references: [id])
  notes       String?
  inspectedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("player_inspections")
}

model MatchScorer {
  id        String @id @default(cuid())
  matchId   String
  match     Match  @relation(fields: [matchId], references: [id])
  playerId  String
  player    Player @relation(fields: [playerId], references: [id])
  goals     Int    @default(1)
  createdAt DateTime @default(now())

  @@map("match_scorers")
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  image     String?
  category  String
  tags      String[]
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blog_posts")
}

model SystemSettings {
  id                    String   @id @default(cuid())
  playerRegistrationOpen Boolean  @default(true)
  officialRegistrationOpen Boolean @default(true)
  updatedAt             DateTime @updatedAt

  @@map("system_settings")
}

model DocumentApproval {
  id                String   @id @default(cuid())
  playerId          String
  player            Player   @relation(fields: [playerId], references: [id])
  documentType      DocumentType
  status            DocumentApprovalStatus @default(PENDING)
  approvedBy        String?
  approvedAt        DateTime?
  comments          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("document_approvals")
}

enum UserRole {
  COUNTY_OFFICIAL
  MATCH_OFFICIAL
  LFA_OFFICIAL
  JOURNALIST
  MYS_STAFF
  GENERAL_ADMIN
  FEDERATION
  FINANCE_OFFICER
  BASKETBALL_FEDERATION
  KICKBALL_FEDERATION
  VOLLEYBALL_FEDERATION
  ATHLETICS_FEDERATION
}

enum Discipline {
  FOOTBALL
  KICKBALL
  FEMALE_SOCCER
  VOLLEYBALL
  BASKETBALL
  ATHLETICS
}

enum ApprovalStatus {
  PENDING
  APPROVED
  DISAPPROVED
}

enum DocumentType {
  PHOTO
  BIRTH_CERTIFICATE
  MEDICAL_CERTIFICATE
}

enum DocumentApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MatchStatus {
  SCHEDULED
  PENDING_INSPECTION
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum OfficialRole {
  REFEREE
  ASSISTANT_REFEREE
  FOURTH_OFFICIAL
  MATCH_COMMISSIONER
}

enum ReportStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum InspectionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ObservationStatus {
  PENDING
  REVIEWED
  RESOLVED
}

model FederationObservation {
  id            String   @id @default(cuid())
  content       String
  discipline    Discipline
  submittedById String
  submittedBy   User     @relation(fields: [submittedById], references: [id])
  status        ObservationStatus @default(PENDING)
  evidence      Json?    // Array of file URLs
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("federation_observations")
}

model MatchInspection {
  id          String   @id @default(cuid())
  matchId     String   @unique
  match       Match    @relation(fields: [matchId], references: [id])
  status      InspectionStatus @default(PENDING)
  inspectorId String
  inspector   User     @relation(fields: [inspectorId], references: [id])
  checklist   InspectionChecklist[]
  photos      InspectionPhoto[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("match_inspections")
}

model InspectionChecklist {
  id              String   @id @default(cuid())
  inspectionId    String
  inspection      MatchInspection @relation(fields: [inspectionId], references: [id])
  item            String
  status          Boolean
  comments        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("inspection_checklists")
}

model InspectionPhoto {
  id              String   @id @default(cuid())
  inspectionId    String
  inspection      MatchInspection @relation(fields: [inspectionId], references: [id])
  url             String
  createdAt       DateTime @default(now())

  @@map("inspection_photos")
}
